-module(etbx_est_tests).
-compile(export_all).
-include_lib("eunit/include/eunit.hrl").

est_test_() ->
    [?_assertEqual({est_rec,[{est_part, chunk, <<"!">>},
                             {est_part, property, foo},
                             {est_part, chunk, <<"hi ">>}]},
                   etbx_est:compile(<<"hi {{foo}}!">>)),
     ?_assertEqual({est_rec,[{est_part, chunk, <<"!">>},
                             {est_part, property, foo},
                             {est_part, chunk, <<"hi ">>}]},
                   etbx_est:compile(<<"hi {{'foo'}}!">>)),
     ?_assertEqual({est_rec,[{est_part, chunk, <<"!">>},
                             {est_part, property, <<"foo">>},
                             {est_part, chunk, <<"hi ">>}]},
                   etbx_est:compile(<<"hi {{  <<\"foo\">> }}!">>)),
     ?_assertEqual({est_rec,[{est_part, chunk, <<"!">>},
                             {est_part, property, foo},
                             {est_part, chunk, <<"hi ">>}]},
                   etbx_est:compile(<<"hi {{foo}}!">>)),
     ?_assertEqual({est_rec,[{est_part, property, bar},
                             {est_part, property, foo}]},
                   etbx_est:compile(<<"%'foo'%%bar%">>, "%(.*)%")),
     ?_assertEqual({est_rec,[{est_part, property, man},
                             {est_part, chunk, <<"choo">>},
                             {est_part, property, moo},
                             {est_part, chunk, <<"baz">>},
                             {est_part, property, bar},
                             {est_part, chunk, <<"foo">>}]},
                   etbx_est:compile(<<"foo%'bar'%baz%moo%choo%man%">>,
                                    "%(.*)%")),
     ?_assertEqual({est_rec,[{est_part, chunk, <<"!">>},
                             {est_part, expression, <<"foo">>},
                             {est_part, chunk, <<"hi ">>}]},
                   etbx_est:compile(<<"hi {{&foo&}}!">>)),
     ?_assertEqual({est_rec,[{est_part, chunk, <<"!">>},
                             {est_part, expression, <<" 'foo' ">>},
                             {est_part, chunk, <<"hi ">>}]},
                   etbx_est:compile(<<"hi {{ & 'foo' &}}!">>)),
     ?_assertEqual({est_rec,[{est_part, expression, <<"bar">>},
                             {est_part, expression, <<"'foo'">>}]},
                   etbx_est:compile(<<"%&'foo'&%%&bar&%">>, "%(.*)%")),
     ?_assertEqual({est_rec,[{est_part, expression, <<"man">>},
                             {est_part, chunk, <<"choo">>},
                             {est_part, expression, <<"moo">>},
                             {est_part, chunk, <<"baz">>},
                             {est_part, expression, <<"'bar'">>},
                             {est_part, chunk, <<"foo">>}]},
                   etbx_est:compile(<<"foo%&'bar'&%baz%&moo&%choo%&man&%">>,
                                    "%(.*)%")),
     ?_assertEqual({est_rec,[{est_part, chunk, <<"hi mom!">>}]},
                   etbx_est:compile(<<"hi mom!">>)),
     ?_assertEqual(<<"hello foo">>,
                   iolist_to_binary(
                     etbx_est:render(etbx_est:compile("hello {{& _@(name, __) &}}"),
                                     #{ name => <<"foo">>}))),
     ?_assertEqual(<<"numbers=[4,8,15,16,23,42]">>,
                   iolist_to_binary(
                     etbx_est:render(etbx_est:compile("numbers={{& _@(num, __) &}}"),
                                     #{ num => [4,8,15,16,23,42]}))),
     ?_assertEqual(<<"hello stranger">>,
                   iolist_to_binary(
                     etbx_est:render(
                       etbx_est:compile("hello {{ &_@@(name, __, 'stranger')& }}"),
                       #{ <<"name">> => <<"foo">>}))),
     ?_assertEqual({est_rec,[{est_part, chunk, <<"hi mom!">>}]},
                   etbx_est:compile(<<"hi mom!">>)),
     ?_assertEqual({est_rec,[{est_part, property, baz},
                             {est_part, property, bar},
                             {est_part, chunk, <<"foo">>}]},
                   etbx_est:compile(<<"foo<'bar'><baz>">>, <<"<(.*)>">>)),
     ?_assertEqual([<<"foo">>, "bar", <<"baz">>],
                   etbx_est:render({est_rec,[{est_part, property, baz},
                                             {est_part, property, bar},
                                             {est_part, chunk, <<"foo">>}]},
                                   [{foo, moo},
                                    {bar, "bar"},
                                    {baz, <<"baz">>}]))].
